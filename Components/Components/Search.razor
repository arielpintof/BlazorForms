@page "/search"
@using BlazorForms.Data.Models
@using BlazorForms.Data.Services
@inject ITemplateService TemplateService

<section class="container min-vh-100 ">
   <h3>Buscar Templates</h3>

   @if (IsLoading)
   {
      <p>Cargando resultados...</p>
   }
   <div class="d-flex p-5 flex-wrap bg-light-theme gap-2">
      @if (SearchResults.Any())
      {
         @foreach (var template in SearchResults)
         {
            <TemplateCard Template="template"></TemplateCard>
         }
      }

      else if (SearchResults != null && !SearchResults.Any())
      {
         <p>No se encontraron resultados para el término "@SearchTerm".</p>
      }
   </div>
</section>


@code {
   private List<Template> SearchResults { get; set; } = [];
   private bool IsLoading { get; set; }

   [Parameter]
   [SupplyParameterFromQuery(Name = "tag")]
   public string? Tag { get; set; }

   [Parameter]
   [SupplyParameterFromQuery(Name = "term")]
   public string? SearchTerm { get; set; }

   protected override async Task OnParametersSetAsync()
   {
      if (Tag is not null)
      {
         SearchResults = await TemplateService.FindTemplatesByTagAsync(Tag);
      }

      if (SearchTerm is not null && Tag is null)
      {
         await SearchTemplatesAsync();
      }
   }

   private async Task SearchTemplatesAsync()
   {
      if (string.IsNullOrWhiteSpace(SearchTerm))
      {
         SearchResults = [];
         return;
      }

      IsLoading = true;
      SearchResults.Clear();
      SearchResults = await TemplateService.SearchTemplatesAsync(SearchTerm);
      IsLoading = false;
   }


}