@using BlazorForms.Data.Enums
@using BlazorForms.Data.Models
@using BlazorForms.Data.Services
@using BlazorForms.Locales
@using BlazorForms.Utils
@inject IFieldService FieldService
@using Blazorise
@using Microsoft.Extensions.Localization
@using Field = BlazorForms.Data.Models.Field
@inject IStringLocalizer<TemplateSettingRes> Localizer


@if (Field is not null)
{
   <div class="card card-form" tabindex="0" @onmousedown="OnMouseDown" @onmouseleave="OnMouseOut">
      <div class="card-body" style="min-height: 100px">
         <div class="row py-2">
            @if (IsEditing)
            {
               <div class="col-8">
                  <Field>
                     <FieldLabel>Title</FieldLabel>
                     <TextEdit Text="@Field.Title" TextChanged="@OnTitleChanged" Placeholder="Question"/>
                  </Field>

               </div>
               <div class="col-4">
                  <Field>
                     <FieldLabel>Question Type</FieldLabel>
                     <Select class="col-4" TValue="FieldType" SelectedValue="@Field.Type" SelectedValueChanged="@OnSelectTypeChange">
                        @foreach (FieldType fieldType in Enum.GetValues(typeof(FieldType)))
                        {
                           <SelectItem Value="@fieldType">@fieldType.ReadableName(Localizer)</SelectItem>
                        }
                     </Select>
                  </Field>

               </div>
            }
            else
            {
               <span>@(Field.Title ?? "Question")</span>
            }
         </div>
         @switch (Field.Type)
         {
            case FieldType.Checkbox or FieldType.MultiSelection:
               if (Field.Options.Any())
               {
                  <div class="d-flex flex-column gap-2">
                     @foreach (var option in Field.Options)
                     {
                        <div class="option-item d-flex align-items-center">
                           <input type="@GetFieldType" class="form-check-input me-2" disabled/>
                           <input type="text" class="form-control form-control-sm me-2" value="@option.Value" @onchange="(e) => InputValueChange(e, option)"/>
                           <button type="button" class="btn close rounded-circle" @onclick="() => RemoveOption(option.Id)">
                              <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="bi bi-x" viewBox="0 0 16 16">
                                 <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708"/>
                              </svg>
                           </button>
                        </div>
                     }
                  </div>
               }

               <div>
                  <button class="button-60" role="button" @onclick="AddQuestion">Add</button>
               </div>
               break;

            case FieldType.SingleLineString:
               <input type="text" class="border-0 border-bottom bg-white px-0" disabled placeholder="Short answer text"/>
               break;

            case FieldType.MultiLineText:
               <input type="text" class="border-0 border-bottom bg-white px-0" disabled placeholder="Long answer text"/>
               break;

            case FieldType.PositiveInteger:
               <input type="text" class="border-0 border-bottom bg-white px-0" disabled placeholder="Positive number"/>
               break;
         }

      </div>
      <div class="card-footer">
         <FieldFooter FieldId="@FieldId" OnDelete="NotifyParent" OnShowInTable="UpdateOnShowInTable" ShowInTable="@Field.ShowInTable"></FieldFooter>
      </div>
   </div>
}

@code {
   [Parameter] public Guid FieldId { get; set; }
   [Parameter] public EventCallback<Guid> OnDelete { get; set; }
   private FieldType FieldType { get; set; }
   private Field? Field { get; set; }
   private bool IsEditing { get; set; } = false;

   protected override async Task OnParametersSetAsync() => Field = await FieldService.FindFieldByIdASync(FieldId);

   private async Task NotifyParent()
   {
      await FieldService.DeleteFieldAsync(FieldId);
      await OnDelete.InvokeAsync(FieldId);
   }

   string GetFieldType => Field?.Type == FieldType.MultiSelection ? "radio" : "checkbox";

   private void OnMouseDown(MouseEventArgs e) => IsEditing = true;

   private void OnMouseOut(MouseEventArgs e) => IsEditing = false;

   private async Task RemoveOption(Guid optionId) => await FieldService.RemoveQuestion(optionId);

   private async Task AddQuestion() => await FieldService.AddQuestion(FieldId);

   private async Task UpdateField()
   {
      if (Field is null) return;
      await FieldService.UpdateFieldAsync(Field);
      StateHasChanged();
   }

   async Task OnTitleChanged(string value)
   {
      if (Field is null) return;
      Field.Title = value;
      await UpdateField();
   }

   async Task OnSelectTypeChange(FieldType fieldType)
   {
      if (Field is null) return;
      Field.Type = fieldType;
      await UpdateField();
   }

   private async Task UpdateOnShowInTable(bool value)
   {
      if (Field is null) return;
      Field.ShowInTable = value;
      await UpdateField();
   }

   private async Task InputValueChange(ChangeEventArgs e, Option option)
   {
      if (Field is null) return;
      var index = Field.Options.IndexOf(option);
      Field.Options[index].Value = e.Value.ToString();
      //Console.WriteLine($"Valor del option en la lista: {Field.Options.SingleOrDefault(e => e.Id == option.Id).Value}");
      await UpdateField();
   }

}