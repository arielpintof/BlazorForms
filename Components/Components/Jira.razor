@page "/Help"
@using BlazorForms.Data
@using BlazorForms.Data.Models.Jira
@using BlazorForms.Data.Services
@using Microsoft.AspNetCore.Identity
@inject IJiraService JiraService
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationState
@inject ITemplateService TemplateService
<PageTitle>Help - Blazor Form</PageTitle>
<div class="container my-5 min-vh-100">
   <div class="row justify-content-center">
      <div class="col-lg-6 col-md-8">
         <div class="card shadow">
            <div class="card-body">
               @if (!Created)
               {
                  <h3 class="card-title text-center mb-4">Create Ticket</h3>
                  <EditForm Model="@Ticket" OnValidSubmit="CreateTicket">
                     <div class="mb-3">
                        <label for="summary" class="form-label">Summary</label>
                        <InputTextArea @bind-Value="Ticket.Fields.Summary" type="text" class="form-control" id="summary" name="summary" required/>
                     </div>
                     
                     <div class="mb-3">
                        <label for="priority" class="form-label">Priority</label>
                        <InputSelect @bind-Value="Ticket.Fields.Priority.Id" class="form-select" id="priority" name="priority" required>
                           <option value="2">High</option>
                           <option value="3">Medium</option>
                           <option value="4">Low</option>
                        </InputSelect>
                     </div>
                     
                     <div class="">
                        <button type="submit" class="btn btn-primary">Submit</button>
                     </div>
                  </EditForm>
               }
               else
               {
                  <div class="text-center py-5">
                     <div class="mb-4">
                        <i class="bi bi-check-circle-fill text-success" style="font-size: 3rem;"></i>
                     </div>
                     <h3 class="text-success">Ticket Created Successfully!</h3>
                     <p>Your ticket has been created and is now being processed.</p>
                     
                     <div class="mt-4">
                        <button class="btn btn-outline-primary" href="/">Back to home page</button>
                     </div>
                  </div>
               }
            </div>
         </div>
      </div>
   </div>
</div>

@code {
   private string? UserId { get; set; }

   [SupplyParameterFromQuery(Name = "From")]
   public string? LinkInvocation { get; set; }
   [SupplyParameterFromQuery(Name = "TemplateId")]
   public string? TemplateId { get; set; }
   
   private Issue Ticket { get; set; } = new();
   private bool Created { get; set; }

   private async Task CreateTicket()
   {
      if (UserId is null) return;
      var user = UserManager.Users.FirstOrDefault(e => e.Id == UserId);
      if (user is null) return;

      var issue = await CreateIssue(user);

      var ticket = await JiraService.CreateIssueAsync(issue, user);
      if (ticket is not null) Created = true;
      Console.WriteLine($"CREATED: {Created}");
      StateHasChanged();
   }

   protected override async Task OnInitializedAsync()
   {
      var state = await AuthenticationState.GetAuthenticationStateAsync();
      if (state.User.Identity is { IsAuthenticated: true })
      {
         UserId = UserManager.GetUserId(state.User);
      }
      
   }

   private async Task<Issue> CreateIssue(ApplicationUser user)
   {
      var template = TemplateId is null ? null : await TemplateService.FindTemplateByIdAsync(Guid.Parse(TemplateId));
      var templateTitle = template?.Name;
      
      return new Issue
      {
         Fields = new Fields
         {
            Description = Ticket.Fields.Description,
            Summary = Ticket.Fields.Summary,
            Issuetype = new Issuetype
            {
               Name = "Bug"
            },
            Project = new Project
            {
               Key = "SUPPORT"
            },
            SubmittedBy = user.Email!,
            LinkInvocation = LinkInvocation,
            TemplateTitle = templateTitle,
            Priority = new Priority
            {
               Id = Ticket.Fields.Priority.Id
            }
         }
      };
   }

}