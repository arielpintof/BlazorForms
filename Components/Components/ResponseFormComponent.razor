@page "/survey/{TemplateId:guid}"
@page "/form/{TemplateId:guid}"
@using BlazorForms.Data
@using BlazorForms.Data.Enums
@using BlazorForms.Data.Models
@using BlazorForms.Data.Services
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject ITemplateService TemplateService
@inject AuthenticationStateProvider AuthenticationState
@inject UserManager<ApplicationUser> UserManager
@inject IResponseFormService ResponseFormService


@if (Template == null)
{
   <p>Loading...</p>
}
else
{
   <PageTitle>@Template.Name</PageTitle>
   <div class="container-lg pb-5 min-vh-100">
      <div class="row justify-content-center">
         <div class="col-md-8">
            @if (Template.ImageUrl is not null)
            {
               <img src="@Template.ImageUrl" class="img-fluid rounded my-4 " alt="Banner" style="height: 200px; object-fit: cover; width: 100%">
            }
            <TemplateHeader Title="@Template.Name" Description="@Template.Description"/>

            @if (!RequiredAccess || (RequiredAccess && AllowedToAnswer))
            {
               <EditForm Model="@_responses" OnSubmit="@GenerateFormResponse">
                  <DataAnnotationsValidator/>
                  <ValidationSummary/>
                  <div class="d-flex flex-column gap-2 py-3">
                     @foreach (var field in Template.Fields.OrderBy(e => e.Order))
                     {
                        <div class="card card-form">
                           <div class="card-body" style="min-height: 100px">
                              <div class="card-title pb-2">
                                 <h5>@field.Title</h5>
                              </div>

                              @if (_responses.TryGetValue(field.Id, out var response))
                              {
                                 @if (field.Type == FieldType.SingleLineString || field.Type == FieldType.MultiLineText)
                                 {
                                    <InputTextArea @bind-Value="response.TextResponse" disabled="@ReadOnly" class="form-control"/>
                                 }
                                 else if (field.Type == FieldType.PositiveInteger)
                                 {
                                    <InputNumber @bind-Value="response.IntegerResponse" disabled="@ReadOnly"class="form-control"/>
                                 }
                                 else if (field.Type == FieldType.MultiSelection)
                                 {
                                    <InputRadioGroup @bind-Value="@response.SelectedOptionId"
                                                     Name="@response.FieldId.ToString()"
                                                     class="form-check">
                                       @foreach (var option in field.Options)
                                       {
                                          <div class="py-1">
                                             <InputRadio Value="option.Id" disabled="@ReadOnly" class="form-check-input ms-2 pointer"/>
                                             <label class="form-check-label px-1">@option.Value</label>
                                          </div>
                                       }
                                    </InputRadioGroup>
                                 }
                              }
                           </div>
                        </div>
                     }
                     <button type="submit" class="btn btn-primary" disabled="@ReadOnly">Submit</button>
                  </div>
               </EditForm>
            }
            else
            {
               <div class="text-center py-5 my-3 bg-light-theme rounded-2">
                  <h3 class="d-flex justify-content-center gap-2 align-items-center text-danger">
                     <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-triangle-alert">
                        <path d="m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3"/><path d="M12 9v4"/><path d="M12 17h.01"/>
                     </svg>
                     Access Denied
                  </h3>
                  <p class="text-muted">
                     You do not have permission to access this form. Please contact the administrator if you believe this is an error.
                  </p>
               </div>
            }
            
         </div>
      </div>
   </div>
}

@code {
   [Parameter] public Guid TemplateId { get; set; }
   private string? UserId { get; set; }
   private Template? Template { get; set; }
   private readonly Dictionary<Guid, FieldResponse> _responses = new();
   private bool ReadOnly { get; set; }
   private bool AlreadyAnswered { get; set; }
   private bool RequiredAccess { get; set; }
   private bool AllowedToAnswer { get; set; }

   protected override async Task OnInitializedAsync()
   {
      var state = await AuthenticationState.GetAuthenticationStateAsync();
      Template = await TemplateService.FindTemplateByIdAsync(TemplateId);
      if (state.User.Identity is { IsAuthenticated: true })
      {
         UserId = UserManager.GetUserId(state.User);
         AlreadyAnswered = Template != null && Template.Responses.Any(e => e.ResponderId.Equals(UserId));
      }
      else
      {
         ReadOnly = true;
      }

      if (Template != null)
      {
         foreach (var field in Template.Fields)
         {
            _responses[field.Id] = new FieldResponse
            {
               Id = Guid.NewGuid(),
               FieldId = field.Id,
            };
         }
      }

      RequiredAccess = Template.IsRestrictedResponse;
      AllowedToAnswer = Template.AllowedResponderIds.Any(e => e == UserId);
   }

   private string DisplayValue(FieldResponse response) =>
      ResponseTextResponse(response, out var textResponse) ? textResponse : "Sin respuesta";


   private bool ResponseTextResponse(FieldResponse response, out string textResponse)
   {
      if (!string.IsNullOrEmpty(response.TextResponse))
      {
         {
            textResponse = response.TextResponse;
            return true;
         }
      }

      if (response.IntegerResponse != null)
      {
         {
            textResponse = response.IntegerResponse.ToString();
            return true;
         }
      }

      if (response.SelectedOptionId != null)
      {
         {
            textResponse = $"Respuesta: {Template.Fields.SingleOrDefault(e => e.Id == response.FieldId).Options.SingleOrDefault(e => e.Id == response.SelectedOptionId).Value}";
            return true;
         }
      }

      textResponse = null;
      return false;
   }

   private async void GenerateFormResponse()
   {
      if (UserId is null) return;
      var user = await UserManager.Users.FirstOrDefaultAsync(e => e.Id == UserId);
      if (user is null) return;

      var formResponse = new FormResponse
      {
         Id = Guid.NewGuid(),
         TemplateId = TemplateId,
         ResponderId = UserId,
         SubmittedAt = DateTime.UtcNow,
         Responder = user,
      };
      foreach (var fieldResponse in _responses.Select(response => new FieldResponse
               {
                  Id = response.Value.Id,
                  FieldId = response.Key,
                  FormResponseId = formResponse.Id,
                  TextResponse = response.Value.TextResponse,
                  IntegerResponse = response.Value.IntegerResponse,
                  SelectedOptionId = response.Value.SelectedOptionId
               }))
      {
         formResponse.FieldResponses.Add(fieldResponse);
      }

      await ResponseFormService.SubmitResponse(formResponse);
   }

}