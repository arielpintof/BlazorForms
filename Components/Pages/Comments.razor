@page "/template/{TemplateId:guid}"
@using BlazorForms.Data
@using BlazorForms.Data.Models
@using BlazorForms.Data.Services
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject ICommentService CommentService
@inject AuthenticationStateProvider AuthenticationState
@inject UserManager<ApplicationUser> UserManager
@implements IAsyncDisposable


<h3>Comentarios del Template</h3>

@if (UserId != null)
{
   <div class="mb-3">
      <textarea @bind="NewComment" class="form-control" placeholder="Escribe tu comentario aquí..." rows="3"></textarea>
   </div>
   <button class="btn btn-primary" @onclick="SubmitComment">Enviar comentario</button>
}

<hr/>

<div class="comment-section">
   @foreach (var comment in CommentList.OrderByDescending(e => e.Date))
   {
      <div class="comment-card">
         <div class="comment-author">@(UserManager.FindByIdAsync(comment.AuthorId).Result.Email)</div>
         <div class="comment-message">@comment.Message</div>
         <div class="comment-date">@comment.Date.ToLocalTime().ToString("g")</div>
      </div>
   }
</div>

@code {
   [Parameter] public Guid TemplateId { get; set; }
   private string? UserId { get; set; }
   private List<Comment> CommentList { get; set; } = [];
   private string NewComment { get; set; }= string.Empty;
   private HubConnection? Connection { get; set; }

   protected override async Task OnInitializedAsync()
   {
      var state = await AuthenticationState.GetAuthenticationStateAsync();
      if (state.User.Identity is { IsAuthenticated: true })
      {
         UserId = UserManager.GetUserId(state.User);
      }
      
      CommentList = await CommentService.FindCommentByTemplateId(TemplateId);
      await InitHubConnectionAsync();
   }
   
   private async Task InitHubConnectionAsync()
   {
      Connection = new HubConnectionBuilder()
         .WithUrl(Navigation.ToAbsoluteUri("/commentHub"))
         .Build();

      await Connection.StartAsync();
      await Connection.InvokeAsync("JoinTemplateGroup", TemplateId);

      Connection.On<Comment>("ReceiveComment", async comment =>
      {
         await InvokeAsync(() =>
         {
            CommentList.Add(comment);
            StateHasChanged();
         });
      });
   }

   private async Task SubmitComment()
   {
      if (string.IsNullOrWhiteSpace(NewComment) || UserId is null || Connection is null) return;

      var comment = await CommentService.AddComment(TemplateId, UserId, NewComment);
      await Connection.InvokeAsync("SendCommentToGroup", comment);
      NewComment = string.Empty;
   }

   public async ValueTask DisposeAsync()
   {
      if (Connection != null)
      {
         await Connection.StopAsync();
         await Connection.DisposeAsync();
      }
   }

}