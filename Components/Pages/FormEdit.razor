@page "/form/{TemplateId}/edit"
@using BlazorForms.Data.Models
@using BlazorForms.Data.Services
@inject ITemplateService TemplateService
@inject IFieldService FieldService
@using Blazorise.Markdown
@using Markdig
@using BlazorForms.Components.Components


<PageTitle>@(Template is null ? "Loading" : Template.Name)</PageTitle>

@if (Template is null)
{
   <span>loading...</span>
}
else
{
   <div class="container mt-5">
      <div class="row justify-content-center">
         <div class="col-md-6">
            <div class="card card-form">
               <div class="card-body">
                  <div class="editable-header mb-2 @(IsEditing ? "editing" : "")" @onclick="StartEditing">
                     @if (IsEditing)
                     {
                        <input @bind="Template.Name"
                               @bind:event="oninput"
                               @onblur="StopEditing"
                               @onkeydown="HandleKeyDown"
                               @ref="inputElement"/>
                     }
                     else
                     {
                        <h2 class="card-title">@(Template.Name ?? "Untitled Form")</h2>
                     }
                  </div>
                  <Markdown Value="@markdownValue" ValueChanged="@OnMarkdownValueChanged" MinHeight="200px">
                     <Toolbar>
                        <MarkdownToolbarButton Action="MarkdownAction.Bold" Title="Bold">
                           <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-type-bold" viewBox="0 0 16 16">
                              <path d="M8.21 13c2.106 0 3.412-1.087 3.412-2.823 0-1.306-.984-2.283-2.324-2.386v-.055a2.176 2.176 0 0 0 1.852-2.14c0-1.51-1.162-2.46-3.014-2.46H3.843V13zM5.908 4.674h1.696c.963 0 1.517.451 1.517 1.244 0 .834-.629 1.32-1.73 1.32H5.908V4.673zm0 6.788V8.598h1.73c1.217 0 1.88.492 1.88 1.415 0 .943-.643 1.449-1.832 1.449H5.907z"/>
                           </svg>
                        </MarkdownToolbarButton>
                        <MarkdownToolbarButton Action="MarkdownAction.Italic" Title="Italic">
                           <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-type-italic" viewBox="0 0 16 16">
                              <path d="M7.991 11.674 9.53 4.455c.123-.595.246-.71 1.347-.807l.11-.52H7.211l-.11.52c1.06.096 1.128.212 1.005.807L6.57 11.674c-.123.595-.246.71-1.346.806l-.11.52h3.774l.11-.52c-1.06-.095-1.129-.211-1.006-.806z"/>
                           </svg>
                        </MarkdownToolbarButton>
                        <MarkdownToolbarButton Separator Action="MarkdownAction.UnorderedList" Title="Unorder List">
                           <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-list-ul" viewBox="0 0 16 16">
                              <path fill-rule="evenodd" d="M5 11.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5m-3 1a1 1 0 1 0 0-2 1 1 0 0 0 0 2m0 4a1 1 0 1 0 0-2 1 1 0 0 0 0 2m0 4a1 1 0 1 0 0-2 1 1 0 0 0 0 2"/>
                           </svg>
                        </MarkdownToolbarButton>
                     </Toolbar>
                  </Markdown>
               </div>
               <div class="card-footer">
                  <div class="d-flex flex-wrap gap-2">
                     <button class="btn btn-outline-secondary" @onclick="AddField">Add Question</button>
                  </div>

               </div>
               
            </div>

            
            <div class="d-flex flex-column gap-2 py-3 ">
               @foreach (var field in Template.Fields)
               {
                  <TemplateField FieldId="field.Id" OnChange="StateHasChanged"/>
               }
            </div>
         </div>
      </div>
   </div>
}

@code {
   [Parameter] public string TemplateId { get; set; } = null!;
   private bool IsEditing { get; set; }
   private ElementReference inputElement;
   private Template? Template { get; set; }
   string markdownValue { get; set; } = "# EasyMDE \n Go ahead, play around with the editor! Be sure to check out **bold**, *italic*, [links](https://google.com) and all the other features. You can type the Markdown syntax, use the toolbar, or use shortcuts like `ctrl-b` or `cmd-b`.";

   string markdownHtml;

   protected override void OnInitialized()
   {
      markdownHtml = Markdig.Markdown.ToHtml(markdownValue ?? string.Empty);

      base.OnInitialized();
   }

   protected override async Task OnParametersSetAsync()
   {
      var id = Guid.Parse(TemplateId);
      Template = await TemplateService.FindTemplateByIdAsync(id);
      markdownValue = Template.Description;
   }

   Task OnMarkdownValueChanged(string value)
   {
      markdownValue = value;
      markdownHtml = Markdig.Markdown.ToHtml(markdownValue ?? string.Empty);
      if (markdownValue != null) TemplateService.UpdateDescriptionAsync(Guid.Parse(TemplateId), markdownValue);

      return Task.CompletedTask;
   }

   private async Task StartEditing()
   {
      IsEditing = true;
      await Task.Delay(50);
      await inputElement.FocusAsync();
   }

   private void StopEditing() => IsEditing = false;

   private void HandleKeyDown(KeyboardEventArgs e)
   {
      if (e.Key != "Enter") return;
      UpdateTitle();
      StopEditing();
   }

   private void UpdateTitle()
   {
      if (Template?.Name != null)
         TemplateService.UpdateFormNameAsync(Guid.Parse(TemplateId), Template.Name);
   }

   private async Task AddField()
   {
      await FieldService.AddFieldToTemplateAsync(Guid.Parse(TemplateId));
      Template = await TemplateService.FindTemplateByIdAsync(Guid.Parse(TemplateId));
      StateHasChanged();
   }

}