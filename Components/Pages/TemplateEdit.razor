@page "/form/{TemplateId}/edit"
@using BlazorForms.Data.Models
@using BlazorForms.Data.Services
@inject ITemplateService TemplateService
@inject IFieldService FieldService
@using Blazorise.Markdown
@using Blazorise
@using Markdig
@using BlazorForms.Components.Components
@using BlazorForms.Locales
@using BlazorForms.Utils
@using Microsoft.AspNetCore.Authorization
@using BlazorForms.Shared
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<TemplateSettingRes> Localization
@attribute [Authorize]

<PageTitle>@(Template is null ? "Loading" : Template.Name)</PageTitle>


@if (Template is null)
{
   <span>loading...</span>
}
else
{
   <div class="container-lg">
      <div class="row justify-content-center">
         <div class="col-md-8">
            <Tabs RenderMode="TabsRenderMode.LazyReload" SelectedTab="questions" Justified="true">
               <Items>
                  <Tab Name="questions">@Localization["Questions"]</Tab>
                  <Tab Name="answers">@Localization["Answers"]</Tab>
                  <Tab Name="settings">@Localization["SettingsTitle"]</Tab>
               </Items>
               <Content>
                  <TabPanel Name="questions">
                     @if (Template.ImageUrl is not null)
                     {
                        <img src="@Template.ImageUrl" class="img-fluid rounded mt-4" alt="Banner" style="height: 200px; object-fit: cover; width: 100%">
                     }
                     <div class="card card-form mt-4">
                        <div class="card-body">
                           <div class="editable-header mb-2 @(IsEditing ? "editing" : "")" @onclick="StartEditing">
                              @if (IsEditing)
                              {
                                 <input @bind="Template.Name"
                                        @bind:event="oninput"
                                        @onblur="StopEditing"
                                        @onkeydown="HandleKeyDown"
                                        @ref="_inputElement"/>
                              }
                              else
                              {
                                 <h2 class="card-title">@(Template.Name ?? "Untitled Form")</h2>
                              }
                           </div>
                           <Markdown Value="@MarkdownValue" ValueChanged="@OnMarkdownValueChanged" MinHeight="200px">
                              <Toolbar>
                                 <MarkdownToolbarButton Action="MarkdownAction.Bold" Title="Bold">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-type-bold" viewBox="0 0 16 16">
                                       <path d="M8.21 13c2.106 0 3.412-1.087 3.412-2.823 0-1.306-.984-2.283-2.324-2.386v-.055a2.176 2.176 0 0 0 1.852-2.14c0-1.51-1.162-2.46-3.014-2.46H3.843V13zM5.908 4.674h1.696c.963 0 1.517.451 1.517 1.244 0 .834-.629 1.32-1.73 1.32H5.908V4.673zm0 6.788V8.598h1.73c1.217 0 1.88.492 1.88 1.415 0 .943-.643 1.449-1.832 1.449H5.907z"/>
                                    </svg>
                                 </MarkdownToolbarButton>
                                 <MarkdownToolbarButton Action="MarkdownAction.Italic" Title="Italic">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-type-italic" viewBox="0 0 16 16">
                                       <path d="M7.991 11.674 9.53 4.455c.123-.595.246-.71 1.347-.807l.11-.52H7.211l-.11.52c1.06.096 1.128.212 1.005.807L6.57 11.674c-.123.595-.246.71-1.346.806l-.11.52h3.774l.11-.52c-1.06-.095-1.129-.211-1.006-.806z"/>
                                    </svg>
                                 </MarkdownToolbarButton>
                                 <MarkdownToolbarButton Separator Action="MarkdownAction.UnorderedList" Title="Unordered List">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-list-ul" viewBox="0 0 16 16">
                                       <path fill-rule="evenodd" d="M5 11.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5m-3 1a1 1 0 1 0 0-2 1 1 0 0 0 0 2m0 4a1 1 0 1 0 0-2 1 1 0 0 0 0 2m0 4a1 1 0 1 0 0-2 1 1 0 0 0 0 2"/>
                                    </svg>
                                 </MarkdownToolbarButton>
                                 <MarkdownToolbarButton Action="MarkdownAction.OrderedList" Title="Ordered List">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-list-ol" viewBox="0 0 16 16">
                                       <path fill-rule="evenodd" d="M5 11.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5"/>
                                       <path d="M1.713 11.865v-.474H2c.217 0 .363-.137.363-.317 0-.185-.158-.31-.361-.31-.223 0-.367.152-.373.31h-.59c.016-.467.373-.787.986-.787.588-.002.954.291.957.703a.595.595 0 0 1-.492.594v.033a.615.615 0 0 1 .569.631c.003.533-.502.8-1.051.8-.656 0-1-.37-1.008-.794h.582c.008.178.186.306.422.309.254 0 .424-.145.422-.35-.002-.195-.155-.348-.414-.348h-.3zm-.004-4.699h-.604v-.035c0-.408.295-.844.958-.844.583 0 .96.326.96.756 0 .389-.257.617-.476.848l-.537.572v.03h1.054V9H1.143v-.395l.957-.99c.138-.142.293-.304.293-.508 0-.18-.147-.32-.342-.32a.33.33 0 0 0-.342.338zM2.564 5h-.635V2.924h-.031l-.598.42v-.567l.629-.443h.635z"/>
                                    </svg>
                                 </MarkdownToolbarButton>
                                 <MarkdownToolbarButton Separator Action="MarkdownAction.Preview" Title="Preview">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye" viewBox="0 0 16 16">
                                       <path d="M16 8s-3-5.5-8-5.5S0 8 0 8s3 5.5 8 5.5S16 8 16 8M1.173 8a13 13 0 0 1 1.66-2.043C4.12 4.668 5.88 3.5 8 3.5s3.879 1.168 5.168 2.457A13 13 0 0 1 14.828 8q-.086.13-.195.288c-.335.48-.83 1.12-1.465 1.755C11.879 11.332 10.119 12.5 8 12.5s-3.879-1.168-5.168-2.457A13 13 0 0 1 1.172 8z"/>
                                       <path d="M8 5.5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5M4.5 8a3.5 3.5 0 1 1 7 0 3.5 3.5 0 0 1-7 0"/>
                                    </svg>
                                 </MarkdownToolbarButton>
                              </Toolbar>
                           </Markdown>

                           <label class="pt-1">Banner</label>
                           <InputFile OnChange="LoadFile" accept=".png,.jpg,.jpeg" class="form-control"/>
                        </div>
                        <div class="card-footer">
                           <div class="d-flex flex-wrap gap-2">
                              <button class="btn btn-outline-secondary border-muted" @onclick="AddField">Add Question</button>
                           </div>
                        </div>
                     </div>
                     <div class="d-flex flex-column gap-2 py-3 ">
                        <SortableList Id="simpleList" Items="Template.Fields.OrderBy(e => e.Order).ToList()" 
                                      OnUpdate="@SortList" Context="item">
                           <SortableItemTemplate>
                              <div class="my-2">
                                 <TemplateField FieldId="@item.Id" OnDelete="StateHasChanged"/>
                              </div>
                              
                           </SortableItemTemplate>
                        </SortableList>
                     </div>
                     <CommentsField TemplateId="@Template.Id"/>
                  </TabPanel>
                  <TabPanel Name="answers">
                     <ResponsesDataGrid Responses="Template.Responses"></ResponsesDataGrid>
                  </TabPanel>
                  <TabPanel Name="settings">
                     <TemplateSettings Template="@Template"></TemplateSettings>
                  </TabPanel>
               </Content>
            </Tabs>
         </div>
      </div>
   </div>
}

@code {
   [Parameter] public string TemplateId { get; set; } = null!;
   private bool IsEditing { get; set; }
   private ElementReference _inputElement;
   private Template? Template { get; set; }
   private string? MarkdownValue { get; set; }
   private string MarkdownContent { get; set; } = string.Empty;

   protected override async Task OnParametersSetAsync()
   {
      var id = Guid.Parse(TemplateId);
      Template = await TemplateService.FindTemplateByIdAsync(id);
      if (Template is null) return;
      MarkdownValue = Template.Description;
      MarkdownContent = Template.Description!;
   }

   Task OnMarkdownValueChanged(string value)
   {
      MarkdownValue = value;
      //markdownHtml = Markdig.Markdown.ToHtml(markdownValue ?? string.Empty);
      if (MarkdownValue != null) TemplateService.UpdateDescriptionAsync(Guid.Parse(TemplateId), MarkdownValue);

      return Task.CompletedTask;
   }

   private async Task StartEditing()
   {
      IsEditing = true;
      await Task.Delay(50);
      await _inputElement.FocusAsync();
   }

   private void StopEditing() => IsEditing = false;

   private void HandleKeyDown(KeyboardEventArgs e)
   {
      if (e.Key != "Enter") return;
      UpdateTitle();
      StopEditing();
   }

   private void UpdateTitle()
   {
      if (Template?.Name != null)
         TemplateService.UpdateFormNameAsync(Guid.Parse(TemplateId), Template.Name);
   }

   private async Task AddField()
   {
      await FieldService.AddFieldToTemplateAsync(Guid.Parse(TemplateId));
      Template = await TemplateService.FindTemplateByIdAsync(Guid.Parse(TemplateId));
      StateHasChanged();
   }

   const long MaxFileSize = 1024 * 1024 * 2; // 2MB

   private async Task LoadFile(InputFileChangeEventArgs e)
   {
      var file = e.File;
      //if (file is null) return;
      var extension = Path.GetExtension(file.Name);
      if (!extension.IsExtensionAllowed()) return;
      var fileStream = file.OpenReadStream(MaxFileSize);
      var url = await new UploadService().UploadImage(file.Name, fileStream);
      await TemplateService.UpdateImageUrl(Guid.Parse(TemplateId), url);
   }

   private async Task SortList((int oldIndex, int newIndex) indices)
   {
      if (Template is null) return;
      var (oldIndex, newIndex) = indices;

      var items = Template.Fields.OrderBy(e => e.Order).ToList();
      var itemToMove = items[oldIndex];
      items.RemoveAt(oldIndex);

      if (newIndex < items.Count)
      {
         items.Insert(newIndex, itemToMove);
      }
      else
      {
         items.Add(itemToMove);
      }

      for (var i = 0; i < items.Count; i++)
      {
         items[i].Order = i; 
         await FieldService.UpdateFieldAsync(items[i]); 
      }
      
      //StateHasChanged();
   }

}