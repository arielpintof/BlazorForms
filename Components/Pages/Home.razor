@page "/"
@using BlazorForms.Data
@using BlazorForms.Data.Models
@using BlazorForms.Data.Services
@using Microsoft.AspNetCore.Identity
@inject AuthenticationStateProvider AuthenticationState
@inject UserManager<ApplicationUser> UserManager
@inject ITemplateService TemplateService
@inject NavigationManager NavigationManager

<PageTitle>Home</PageTitle>


<AuthorizeView>
   <Authorized >
      <div class="d-flex flex-column gap-3">
         <div class="d-flex flex-column">
            User Id: @UserId
            <button class="btn btn-primary" @onclick="CreateForm">Create an empty template</button>
         </div>

         <div>
            <h4>Your templates</h4>
            <table class="table table-hover table-striped">
               <thead class="thead-light">
               <tr>
                  <th>Name</th>
                  <th>Description</th>
                  <th>Template Id</th>
                  <th>Created At</th>
                  <th></th>
               </tr>
               </thead>
               <tbody>
               @foreach (var template in Templates)
               {
                  <tr>
                     <td>@template.Name</td>
                     <td>@template.Description</td>
                     <td>@template.Id</td>
                     <td>@template.CreatedAt.ToString("yyyy-MM-dd")</td>
                     <td>
                        <button @onclick="() => EditTemplate(template.Id)" class="btn btn-outline-primary">
                           Edit
                        </button>
                        <button @onclick="() => DeleteTemplate(template.Id)" class="btn btn-outline-danger">
                           Delete
                        </button>
                     </td>
                  </tr>
               }
               </tbody>
            </table>
         </div>
      </div>
   </Authorized>
   <NotAuthorized>
      <h1>Hello, world!</h1>

      Welcome to your new app.
   </NotAuthorized>
</AuthorizeView>

@code {
   string? UserId { get; set; }
   private IList<Template> Templates { get; set; } = [];

   protected override async Task OnInitializedAsync()
   {
      var state = await AuthenticationState.GetAuthenticationStateAsync();
      if (state.User.Identity is { IsAuthenticated: true })
      {
         UserId = UserManager.GetUserId(state.User);
         Templates = await TemplateService.FindTemplatesByAuthor(UserId);
      }
   }

   private async Task CreateForm()
   {
      var template = await TemplateService.CreateEmptyTemplate();
      Console.WriteLine(template.Id);
      NavigationManager.NavigateTo($"/form/{template.Id}/edit");
   }

   private void EditTemplate(Guid id) => NavigationManager.NavigateTo($"/form/{id}/edit");

   private async Task DeleteTemplate(Guid templateId)
   {
      await TemplateService.DeleteTemplateAsync(templateId);
      Templates = await TemplateService.FindTemplatesByAuthor(UserId);
      StateHasChanged();
   }

}