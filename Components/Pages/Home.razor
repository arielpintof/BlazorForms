@page "/"
@using BlazorForms.Data
@using BlazorForms.Data.Models
@using BlazorForms.Data.Services
@using BlazorForms.Locales
@using Microsoft.AspNetCore.Identity
@using BlazorForms.Components.Components
@using Microsoft.EntityFrameworkCore
@inject AuthenticationStateProvider AuthenticationState
@inject UserManager<ApplicationUser> UserManager
@inject ITemplateService TemplateService
@inject NavigationManager NavigationManager
@inject ApplicationDbContext Context
<PageTitle>Home</PageTitle>

<div class="container-sm">
   <div class="d-flex flex-column mx-auto py-5 w-75">
      <h1 class="fw-semibold text-center text-primary-theme">
         Create online surveys and forms that mean business
      </h1>
      <p class="text-center text-primary-theme">Get better insights faster—with expert templates, helpful AI, and convenient ways to reach more people.</p>
      <div class="d-flex justify-content-center">
         <button class="btn btn-primary fw-normal px-4 justify-content-center">Sign Up</button>
      </div>
   </div>
   <AuthorizeView>
      <Authorized >
         <div class="d-flex flex-column gap-3">

            <section class="py-2 px-3 bg-light-theme rounded-2">
               <div class="d-flex justify-content-between py-2 align-items-center">
                  <h5 class="fw-medium text-primary-theme">Your latest templates</h5>
                  <div class="">
                     <button class="btn btn-primary btn-sm fw-medium d-flex gap-1 align-items-center"
                             @onclick="CreateForm">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-plus">
                           <path d="M5 12h14"/><path d="M12 5v14"/>
                        </svg>
                        New template
                     </button>
                  </div>
               </div>

               <div class="d-flex gap-2 flex-wrap">
                  @foreach (var template in UserTemplates.OrderBy(e => e.CreatedAt).Take(6))
                  {
                     <TemplateCard Template="@template"></TemplateCard>
                  }
               </div>
            </section>
            <section class="py-2 px-3 bg-light-theme rounded-2">
               <h5 class="fw-medium py-2 text-primary-theme">Latest templates</h5>
               <div class="d-flex gap-2">
                  @foreach (var template in LatestCreatedTemplates.Take(6))
                  {
                     <TemplateCard Template="@template"></TemplateCard>
                  }
               </div>
            </section>
         </div>
      </Authorized>
      <NotAuthorized>
         <h1>Hello, world!</h1>

         Welcome to your new app.
      </NotAuthorized>
   </AuthorizeView>
   <TagCloud></TagCloud>

</div>


@code {
   string? UserId { get; set; }
   private IList<Template> UserTemplates { get; set; } = [];
   private IList<Template> LatestCreatedTemplates { get; set; } = [];

   protected override async Task OnInitializedAsync()
   {
      var state = await AuthenticationState.GetAuthenticationStateAsync();
      if (state.User.Identity is { IsAuthenticated: true })
      {
         UserId = UserManager.GetUserId(state.User);
         UserTemplates = await TemplateService.FindTemplatesByAuthor(UserId);
      }

      LatestCreatedTemplates = await Context.Templates.Where(e => e.IsPublic == true)
         .OrderByDescending(e => e.CreatedAt).Take(5).ToListAsync();
   }

   private async Task CreateForm()
   {
      var template = await TemplateService.CreateEmptyTemplate();
      Console.WriteLine(template.Id);
      NavigationManager.NavigateTo($"/form/{template.Id}/edit");
   }

   private void EditTemplate(Guid id) => NavigationManager.NavigateTo($"/form/{id}/edit");

   private async Task DeleteTemplate(Guid templateId)
   {
      await TemplateService.DeleteTemplateAsync(templateId);
      UserTemplates = await TemplateService.FindTemplatesByAuthor(UserId);
      StateHasChanged();
   }

}