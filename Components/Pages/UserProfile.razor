@page "/Profile"
@using BlazorForms.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

@if (User is not null)
{
   <EditForm Model="@User">
                <DataAnnotationsValidator />

                <div class="space-y-6">
                    <!-- Información básica -->
                    <div class="border-b pb-6">
                        <h3 class="text-xl font-semibold mb-4">Información Básica</h3>
                        <div class="grid grid-cols-1 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700">Email</label>
                                <InputText @bind-Value="User.Email" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm" disabled />
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700">Nombre de Usuario</label>
                                <InputText @bind-Value="User.UserName" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm" />
                                <ValidationMessage For="@(() => User.UserName)" />
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700">Número de Teléfono</label>
                                <InputText @bind-Value="User.PhoneNumber" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm" />
                                <ValidationMessage For="@(() => User.PhoneNumber)" />
                            </div>
                        </div>
                    </div>

                    <!-- Seguridad -->
                    <div class="border-b pb-6">
                        <h3 class="text-xl font-semibold mb-4">Seguridad</h3>
                        <div class="space-y-4">
                            <div class="flex items-center justify-between">
                                <div>
                                    <h4 class="text-base font-medium">Autenticación de dos factores</h4>
                                    <p class="text-sm text-gray-500">@(User.TwoFactorEnabled ? "Activada" : "Desactivada")</p>
                                </div>
                                <div class="flex items-center">
                                    <InputCheckbox @bind-Value="User.TwoFactorEnabled" />
                                </div>
                            </div>
                            <button type="button" class="text-blue-600 hover:text-blue-800">
                                Cambiar contraseña
                            </button>
                        </div>
                    </div>

                    <!-- Preferencias -->
                    <div>
                        <h3 class="text-xl font-semibold mb-4">Preferencias</h3>
                        <div class="space-y-4">
                            <div class="flex items-center justify-between">
                                <div>
                                    <h4 class="text-base font-medium">Recibir notificaciones por email</h4>
                                    <p class="text-sm text-gray-500">Mantente informado sobre actualizaciones importantes</p>
                                </div>
                                <div class="flex items-center">
                                    
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="flex justify-end space-x-4">
                        <button type="button" class="px-4 py-2 border rounded-md hover:bg-gray-50" >
                            Cancelar
                        </button>
                        <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">
                            Guardar Cambios
                        </button>
                    </div>
                </div>
            </EditForm>
}

@code {
    private ApplicationUser? User { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userIdentity = authState.User;

        if (userIdentity.Identity is { IsAuthenticated: true, Name: not null })
        {
            User = await UserManager.FindByNameAsync(userIdentity.Identity.Name);
        }
    }

}